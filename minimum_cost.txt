#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>



using namespace __gnu_pbds;
using namespace std;
#define ff              first
#define ss              second
#define ll             long long
#define pb              push_back
//#define mp              make_pair
#define pii             pair<int,int>
#define vi              vector<int>
#define mii             map<int,int>
#define pqb             priority_queue<int>
#define pqs             priority_queue<int,vi,greater<int> >
#define setbits(x)      __builtin_popcountll(x)
#define zrobits(x)      __builtin_ctzll(x)
#define mod             1000000007
#define inf             1e18
#define ps(x,y)         fixed<<setprecision(y)<<x
#define mk(arr,n,type)  type *arr=new type[n];
#define w(x)            int x; cin>>x; while(x--)
#define orset 			tree < int ,  null_type ,  less ,  rb_tree_tag ,  tree_order_statistics_node_update >
//mt19937                 rng(chrono::steady_clock::now().time_since_epoch().count());

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;


void c_p_c()
{
	ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
}



int main(int argc, char* rgv[])
{

	c_p_c();
	int x, y;
	//cin >> x >> y;
	x = y = 5;
	int arr[x][y];
	for (int i = 0; i < x; i++)
		for (int j = 0; j < y; j++)
			cin >> arr[i][j];

//programm of finding minimum cost to reach on any other point in array





	int min_cost[x][y];
	min_cost[0][0] = arr[0][0];

	for (int i = 1; i < y; i++) //first row
		min_cost[0][i] = min_cost[0][i - 1] + arr[0][i];

	for (int i = 1; i < x; i++) // first column
		min_cost[i][0] = min_cost[i - 1][0] + arr[i][0];





	for (int i = 1; i < x; i++)
	{	for (int j = 1; j < y; j++)

			min_cost[i][j] = min(min_cost[i - 1][j], min_cost[i][j - 1]) + arr[i][j];
	}

	for (int i = 0; i < x; i++)
	{	for (int j = 0; j < y; j++)

			cout << min_cost[i][j] << " ";
		cout << endl;
	}



	return 0;
}
