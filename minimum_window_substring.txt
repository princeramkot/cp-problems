#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <unordered_map>


using namespace __gnu_pbds;
using namespace std;
#define ff              first
#define ss              second
#define ll             long long
#define pb              push_back
//#define mp              make_pair
#define pii             pair<int,int>
#define vi              vector<int>
#define mii             map<int,int>
#define pqb             priority_queue<int>
#define pqs             priority_queue<int,vi,greater<int> >
#define setbits(x)      __builtin_popcountll(x)
#define zrobits(x)      __builtin_ctzll(x)
#define mod             1000000007
#define inf             1e18
#define ps(x,y)         fixed<<setprecision(y)<<x
#define mk(arr,n,type)  type *arr=new type[n];
#define w(x)            int x; cin>>x; while(x--)
#define orset 			tree < int ,  null_type ,  less ,  rb_tree_tag ,  tree_order_statistics_node_update >
//mt19937                 rng(chrono::steady_clock::now().time_since_epoch().count());

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;


void c_p_c()
{
	ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
}

int main(int argc, char* rgv[])
{

//	c_p_c();
	string s="absczkslojcfdsga", t="dsa",nn=""; 
	 if(t.length()>s.length())
        cout<<"nothing";
    else if(t.length()==1 && s.length()==1)
    {
        if(t!=s)
            cout<<"nothing";
        else cout<< t;
}	
	int result[2] = { -1, 99999999};

	unordered_map<char, int> mp;
	unordered_map<char,int> latr_seen;
	int counter=0, slow = 0, fast = 0,flag=0;


	for (int i = 0; i < t.length(); i++)
	{
		if(mp.find(t[i])!=mp.end())
		{
			mp[t[i]]+=1;
			
			
		}	
			
			else{
				mp[t[i]] = 1;
				latr_seen[t[i]]=0;
				counter++;
				
			}

		
	}
	


	for (int i = 0; i < s.length(); i++)
	{fast=i;
		
		if (mp.find(s[i]) != mp.end())
		{	
			latr_seen[s[i]]+=1;	
				
			if(latr_seen[s[i]]==mp[s[i]])
			counter--;

		}

		while (counter == 0)
		{		flag=1;
		
			if (fast - slow < result[1] - result[0])
			{	result[0] = slow;
				result[1] = fast;
				
				
			}
			if (mp.find(s[slow]) != mp.end())

			{
				latr_seen[s[slow]]-=1;
				
				//	mp[s[slow]] -= 1;
					
					if(latr_seen[s[slow]]<mp[s[slow]])
					counter+=1;
			}
			
			slow++;
			

		}




	}
	
	cout<<flag<<endl;

if(flag==1)
{

for(int i=result[0];i<=result[1];i++)
{
	
	nn+=s[i];
}
}
if(flag==1 && counter<=1 )
cout<<nn<<endl;


cout<<counter<<endl;
	return 0;
}
